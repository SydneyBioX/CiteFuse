// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// wtmRcpp
double wtmRcpp(NumericVector x, NumericVector w);
RcppExport SEXP _CiteFuse_wtmRcpp(SEXP xSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(wtmRcpp(x, w));
    return rcpp_result_gen;
END_RCPP
}
// wtvRcpp
double wtvRcpp(NumericVector x, NumericVector w);
RcppExport SEXP _CiteFuse_wtvRcpp(SEXP xSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(wtvRcpp(x, w));
    return rcpp_result_gen;
END_RCPP
}
// corRcpp
NumericMatrix corRcpp(NumericMatrix& X);
RcppExport SEXP _CiteFuse_corRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(corRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// covRcpp
NumericMatrix covRcpp(NumericMatrix& X, const int norm_type);
RcppExport SEXP _CiteFuse_covRcpp(SEXP XSEXP, SEXP norm_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type norm_type(norm_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(covRcpp(X, norm_type));
    return rcpp_result_gen;
END_RCPP
}
// vlrRcpp
NumericMatrix vlrRcpp(NumericMatrix& X);
RcppExport SEXP _CiteFuse_vlrRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(vlrRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// clrRcpp
NumericMatrix clrRcpp(NumericMatrix& X);
RcppExport SEXP _CiteFuse_clrRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(clrRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// alrRcpp
NumericMatrix alrRcpp(NumericMatrix& X, const int ivar);
RcppExport SEXP _CiteFuse_alrRcpp(SEXP XSEXP, SEXP ivarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int >::type ivar(ivarSEXP);
    rcpp_result_gen = Rcpp::wrap(alrRcpp(X, ivar));
    return rcpp_result_gen;
END_RCPP
}
// symRcpp
NumericMatrix symRcpp(NumericMatrix& X);
RcppExport SEXP _CiteFuse_symRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(symRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// phiRcpp
NumericMatrix phiRcpp(NumericMatrix X, const bool sym);
RcppExport SEXP _CiteFuse_phiRcpp(SEXP XSEXP, SEXP symSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< const bool >::type sym(symSEXP);
    rcpp_result_gen = Rcpp::wrap(phiRcpp(X, sym));
    return rcpp_result_gen;
END_RCPP
}
// rhoRcpp
NumericMatrix rhoRcpp(NumericMatrix X, NumericMatrix lr, const int ivar);
RcppExport SEXP _CiteFuse_rhoRcpp(SEXP XSEXP, SEXP lrSEXP, SEXP ivarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< const int >::type ivar(ivarSEXP);
    rcpp_result_gen = Rcpp::wrap(rhoRcpp(X, lr, ivar));
    return rcpp_result_gen;
END_RCPP
}
// indexPairs
std::vector<int> indexPairs(NumericMatrix& X, const String op, const double ref);
RcppExport SEXP _CiteFuse_indexPairs(SEXP XSEXP, SEXP opSEXP, SEXP refSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const String >::type op(opSEXP);
    Rcpp::traits::input_parameter< const double >::type ref(refSEXP);
    rcpp_result_gen = Rcpp::wrap(indexPairs(X, op, ref));
    return rcpp_result_gen;
END_RCPP
}
// indexToCoord
List indexToCoord(IntegerVector V, const int N);
RcppExport SEXP _CiteFuse_indexToCoord(SEXP VSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(indexToCoord(V, N));
    return rcpp_result_gen;
END_RCPP
}
// coordToIndex
IntegerVector coordToIndex(IntegerVector row, IntegerVector col, const int N);
RcppExport SEXP _CiteFuse_coordToIndex(SEXP rowSEXP, SEXP colSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type row(rowSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type col(colSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(coordToIndex(row, col, N));
    return rcpp_result_gen;
END_RCPP
}
// linRcpp
NumericMatrix linRcpp(NumericMatrix& rho, NumericMatrix lr);
RcppExport SEXP _CiteFuse_linRcpp(SEXP rhoSEXP, SEXP lrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type lr(lrSEXP);
    rcpp_result_gen = Rcpp::wrap(linRcpp(rho, lr));
    return rcpp_result_gen;
END_RCPP
}
// lltRcpp
NumericVector lltRcpp(NumericMatrix& X);
RcppExport SEXP _CiteFuse_lltRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(lltRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// urtRcpp
NumericVector urtRcpp(NumericMatrix& X);
RcppExport SEXP _CiteFuse_urtRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(urtRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// labRcpp
List labRcpp(int nfeats);
RcppExport SEXP _CiteFuse_labRcpp(SEXP nfeatsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nfeats(nfeatsSEXP);
    rcpp_result_gen = Rcpp::wrap(labRcpp(nfeats));
    return rcpp_result_gen;
END_RCPP
}
// half2mat
NumericMatrix half2mat(NumericVector X);
RcppExport SEXP _CiteFuse_half2mat(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(half2mat(X));
    return rcpp_result_gen;
END_RCPP
}
// ratiosRcpp
NumericMatrix ratiosRcpp(NumericMatrix& X);
RcppExport SEXP _CiteFuse_ratiosRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(ratiosRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// lr2vlr
NumericMatrix lr2vlr(NumericMatrix lr);
RcppExport SEXP _CiteFuse_lr2vlr(SEXP lrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type lr(lrSEXP);
    rcpp_result_gen = Rcpp::wrap(lr2vlr(lr));
    return rcpp_result_gen;
END_RCPP
}
// lr2rho
NumericMatrix lr2rho(NumericMatrix lr);
RcppExport SEXP _CiteFuse_lr2rho(SEXP lrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type lr(lrSEXP);
    rcpp_result_gen = Rcpp::wrap(lr2rho(lr));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CiteFuse_wtmRcpp", (DL_FUNC) &_CiteFuse_wtmRcpp, 2},
    {"_CiteFuse_wtvRcpp", (DL_FUNC) &_CiteFuse_wtvRcpp, 2},
    {"_CiteFuse_corRcpp", (DL_FUNC) &_CiteFuse_corRcpp, 1},
    {"_CiteFuse_covRcpp", (DL_FUNC) &_CiteFuse_covRcpp, 2},
    {"_CiteFuse_vlrRcpp", (DL_FUNC) &_CiteFuse_vlrRcpp, 1},
    {"_CiteFuse_clrRcpp", (DL_FUNC) &_CiteFuse_clrRcpp, 1},
    {"_CiteFuse_alrRcpp", (DL_FUNC) &_CiteFuse_alrRcpp, 2},
    {"_CiteFuse_symRcpp", (DL_FUNC) &_CiteFuse_symRcpp, 1},
    {"_CiteFuse_phiRcpp", (DL_FUNC) &_CiteFuse_phiRcpp, 2},
    {"_CiteFuse_rhoRcpp", (DL_FUNC) &_CiteFuse_rhoRcpp, 3},
    {"_CiteFuse_indexPairs", (DL_FUNC) &_CiteFuse_indexPairs, 3},
    {"_CiteFuse_indexToCoord", (DL_FUNC) &_CiteFuse_indexToCoord, 2},
    {"_CiteFuse_coordToIndex", (DL_FUNC) &_CiteFuse_coordToIndex, 3},
    {"_CiteFuse_linRcpp", (DL_FUNC) &_CiteFuse_linRcpp, 2},
    {"_CiteFuse_lltRcpp", (DL_FUNC) &_CiteFuse_lltRcpp, 1},
    {"_CiteFuse_urtRcpp", (DL_FUNC) &_CiteFuse_urtRcpp, 1},
    {"_CiteFuse_labRcpp", (DL_FUNC) &_CiteFuse_labRcpp, 1},
    {"_CiteFuse_half2mat", (DL_FUNC) &_CiteFuse_half2mat, 1},
    {"_CiteFuse_ratiosRcpp", (DL_FUNC) &_CiteFuse_ratiosRcpp, 1},
    {"_CiteFuse_lr2vlr", (DL_FUNC) &_CiteFuse_lr2vlr, 1},
    {"_CiteFuse_lr2rho", (DL_FUNC) &_CiteFuse_lr2rho, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_CiteFuse(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
